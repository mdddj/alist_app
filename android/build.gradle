buildscript {
    ext {
        agp_version = '8.2.2'
        agp_version1 = '8.2.2'
    }
    ext.kotlin_version = '1.7.10'
    repositories {
        google()
        mavenCentral()
        jcenter()
        maven { url 'https://maven.zohodl.com' }
        maven { url 'https://jitpack.io' }
        maven { url 'https://maven.aliyun.com/repository/google' }
        maven { url 'https://maven.aliyun.com/repository/jcenter' }
        maven { url 'https://maven.aliyun.com/repository/central' }
        maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
        maven {
            url 'http://maven.aliyun.com/nexus/content/groups/public'
            allowInsecureProtocol = true
        }
        maven {
            url 'http://maven.aliyun.com/nexus/content/groups/public/'
            allowInsecureProtocol = true
        }
        maven {
            url 'http://maven.aliyun.com/nexus/content/repositories/releases/'
            allowInsecureProtocol = true
        }

    }

    dependencies {
        classpath "com.android.tools.build:gradle:$agp_version1"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        jcenter()
        maven { url 'https://maven.zohodl.com' }
        maven { url 'https://jitpack.io' }
        maven { url 'https://maven.aliyun.com/repository/google' }
        maven { url 'https://maven.aliyun.com/repository/jcenter' }
        maven { url 'https://maven.aliyun.com/repository/central' }
        maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
        maven {
            url 'http://maven.aliyun.com/nexus/content/groups/public'
            allowInsecureProtocol = true
        }
        maven {
            url 'http://maven.aliyun.com/nexus/content/groups/public/'
            allowInsecureProtocol = true
        }
        maven {
            url 'http://maven.aliyun.com/nexus/content/repositories/releases/'
            allowInsecureProtocol = true
        }

    }
}

rootProject.buildDir = '../build'
subprojects {
    project.buildDir = "${rootProject.buildDir}/${project.name}"

    afterEvaluate { project ->
        if (project.hasProperty('android')) {
            project.android {
                if (namespace == null) {
                    namespace project.group
                }
            }
        }
    }
}
subprojects {
    project.evaluationDependsOn(':app')



}

tasks.register("clean", Delete) {
    delete rootProject.buildDir
}
